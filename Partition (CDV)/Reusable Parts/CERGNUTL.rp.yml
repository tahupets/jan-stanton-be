Reusable Part:
  Name:               CERGNUTL
  Enabled For RDMLX:  Yes
  Target Platform:    Windows/IBM i/Linux

  Multilingual Details:
  - ENG:
      Description:        "CE General Utility"

  Source: |
    * ========================================================
    * Copyright       : (C) Lansa Commerce Edition, 2018
    * Type            : Reusable Part
    * Platform        : Web Application (Visual LANSA)
    * Name            : CERGNUTL
    * Identifier      : CERGNUTL
    * Ancestor        : PRIM_OBJT
    * Written By      : Jan Metica
    * Written On      : 26th September 2018
    * Description     : CE General Utility
    * =======================================================
    * Modification Log
    * -------------------------------------------------------
    * User       : Date       : Description (Inc App Trkr #)
    * -------------------------------------------------------
    *
    * =======================================================
    Function Options(*DIRECT)
    * =======================================================
    Begin_Com Role(*EXTENDS #PRIM_OBJT)
    * =======================================================
    * Global Definitions
    * =======================================================
    
    Define_Com Class(#CNRDTAMD) Name(#Global_DataModel) Desc('Global Data Model') Help('Global Data Model') Scope(*APPLICATION)
    
    * =======================================================
    * Method Definitions
    * =======================================================
    * =======================================================
    * Mthroutine ....: umFormatDisplayPrice
    * Description....: Format display price using the storefront parameters like the currency, thousand separator and decimal symbols
    * =======================================================
    Mthroutine Name(umFormatDisplayPrice) Desc('Format Display Price') Help('Format display price using the storefront parameters like the currency, thousand separator and decimal symbols')
    
    Define_Map For(*INPUT) Class(#LW3ORDTOT) Name(#iNumericValue) Help('Numeric value')
    Define_Map For(*INPUT) Class(#LW3TSSYM) Name(#iCurrencySymbol) Help('Currency symbol')
    Define_Map For(*INPUT) Class(#LW3DPSYM) Name(#iDecimalSymbol) Help('Decimal point')
    Define_Map For(*INPUT) Class(#LW3TSSYM) Name(#iThousandSymbol) Help('Thousands separator')
    
    Define_Map For(*OUTPUT) Class(#PRIM_ALPH) Name(#oReturnField)
    
    Define_Com Class(#PRIM_NMBR) Name(#L_Counter)
    
    * Set default symbols if none are passed
    If Cond(#iDecimalSymbol = *BLANKS)
    #iDecimalSymbol := '.'
    Endif
    If Cond(#iThousandSymbol = *BLANKS)
    #iThousandSymbol := ','
    Endif
    If Cond(#iCurrencySymbol = *BLANKS)
    #iCurrencySymbol := '$'
    Endif
    
    * Edit numeric value
    #LW3ORDTOT := #iNumericValue
    Use Builtin(FORMAT_STRING) With_Args(':LW3ORDTOT(editcode ,N)') To_Get(#oReturnField)
    
    * Find decimal point
    #L_Counter := #oReturnField.LastPositionOf( '.' )
    
    * Replace thousands separator(s) and decimal point
    If Cond(#iThousandSymbol *NE *blank)
    #oReturnField := #oReturnField.ReplaceAll( "," #iThousandSymbol )
    If Cond(#STD_COUNT *NE *zero)
    #oReturnField := #oReturnField.ReplaceSubstring( #L_Counter 1 #iDecimalSymbol )
    Endif
    
    Else
    #oReturnField := #oReturnField.RemoveAll( "," )
    #oReturnField := #oReturnField.Replace( "." #iDecimalSymbol )
    Endif
    
    #oReturnField := #iCurrencySymbol + #OReturnField
    Endroutine
    
    * =======================================================
    * Mthroutine ....: umSplitString
    * Description....: Split string into an array
    * =======================================================
    Mthroutine Name(umSplitString)
    Define_Map For(*INPUT) Class(#Prim_dc.UnicodeString) Name(#String)
    Define_Map For(*INPUT) Class(#Prim_dc.UnicodeString) Name(#Separator) Mandatory(" ")
    Define_Map For(*INPUT) Class(#Prim_boln) Name(#IncludeBlankItems) Mandatory(False)
    Define_Map For(*RESULT) Class(#prim_lcol<#Prim_dc.UnicodeString>) Name(#Result) Pass(*BY_REFERENCE)
    
    Define_Com Class(#prim_nmbr) Name(#Break)
    
    #Result <= *New #prim_lcol<#Prim_dc.UnicodeString>
    
    If (#String <> "")
    
    Begin_Loop
    
    * Look for the first separator in the string
    #Break := #String.PositionOf( #Separator )
    
    Case (#Break)
    
    When (= 0) /* No separator found, so must be a whole word remaining */
    
    #Result.Insert( (*New #Prim_dc.unicodeString) )
    #Result.Last := #String
    
    Leave
    
    When (= 1) /* Separator is next character, so must be zero length item */
    
    If (#IncludeBlankItems)
    
    #Result.Insert( (*New #Prim_dc.unicodeString) )
    
    Endif
    
    Otherwise /* Substring */
    
    #Result.Insert( (*New #Prim_dc.unicodeString) )
    #Result.Last := #String.Substring( 1 (#Break - 1) )
    
    Endcase
    
    * Remove the item from the string
    #String := #String.DeleteSubstring( 1 #Break )
    
    End_Loop
    
    Endif
    
    Endroutine
    
    * =======================================================
    * Mthroutine ....: umEscapeSpecialChars
    * Description....: Escape special characters before using them in SQL queries
    * =======================================================
    Mthroutine Name(umEscapeSpecialChars) Help('Escape special characters before using them in SQL queries')
    Define_Map For(*INPUT) Class(#PRIM_ALPH) Name(#iString) Desc('String') Help('String')
    
    Define_Map For(*RESULT) Class(#PRIM_ALPH) Name(#rResultString) Desc('Result String')
    
    #rResultString := #iString.ReplaceAll( "'" "''" )
    Endroutine
    
    * =======================================================
    * Mthroutine ....: umDisplaySpecialChar
    * Description....: Display value with special characters which are replaced with placeover characters
    * =======================================================
    Mthroutine Name(umDisplaySpecialChar)
    Define_Map For(*INPUT) Class(#STD_NVARC) Name(#iText)
    Define_Map For(*RESULT) Class(#STD_NVARC) Name(#rText)
    
    #rText := #iText
    
    * Replace | with  ™
    If Cond(#rText.Contains( (124).asUnicodeString ))
    #rText := #rText.ReplaceAll( (124).asUnicodeString (8482).AsUnicodeString )
    Endif
    
    * Replace ^ with ®
    If Cond(#rText.Contains( (94).asUnicodeString ))
    #rText := #rText.ReplaceAll( (94).asUnicodeString (174).AsUnicodeString )
    Endif
    Endroutine
    
    * =======================================================
    * Mthroutine ....: umInchesToFeetAndInches
    * Description....: Convert Feet to Inches.
    * =======================================================
    Mthroutine Name(umInchesToFeetAndInches) Help('Convert Inches to Feet and Inches')
    Define_Map For(*INPUT) Class(#L00WDTIN) Name(#iInches)
    
    Define_Map For(*OUTPUT) Class(#L00WTHFT) Name(#oTotalFeet)
    Define_Map For(*OUTPUT) Class(#L00WTHIN) Name(#oTotalInches)
    
    #oTotalFeet := #iInches / 12
    #oTotalInches := #iInches.Mod( 12 )
    Endroutine
    
    * =======================================================
    * Mthroutine ....: umProperCase
    * Description....: Convert text into propercase
    * =======================================================
    Mthroutine Name(umProperCase)
    Define_Map For(*INPUT) Class(#STD_QSEL) Name(#iInputString) Desc('input')
    Define_Map For(*RESULT) Class(#STD_QSEL) Name(#rResult) Desc('output string')
    
    Define Field(#wCounter) Reffld(#STD_COUNT) Desc('index')
    Define Field(#wInputLength) Reffld(#STD_COUNT) Desc('input length')
    Define Field(#wCurrentCharacter) Reffld(#STD_ALPHA) Desc('current char')
    Define Field(#wFlag_FirstLetter) Type(*BOOLEAN) Desc('first letter flag (1/0)')
    Define Field(#wFlag_Space) Type(*BOOLEAN) Desc('space flag (1/0)')
    Define Field(#wInputString) Reffld(#STD_QSEL) Desc('Input string in upper case')
    * No whitespace in the specs, but if ever, the logic is here, you just need to uncomment it
    * Define Field(#wWhitespace) Reffld(#STD_QSEL) Desc('characters after this will be uppercase')
    Define Field(#wValidChar) Reffld(#STD_QSEL) Desc('characters considered as valid')
    
    Define Field(#wCurrentWordStart) Reffld(#STD_COUNT)
    Define Field(#wCurrentWordLen) Reffld(#STD_COUNT)
    Define Field(#wCurrentWord) Reffld(#STD_TEXT)
    
    #rResult := ''
    
    * Initialize by changing input text into uppercase
    #wInputString := #iInputString.UpperCase
    
    * Write Whitespace words in between spaces, words in upper case
    * Characters after Whitespace Characters will automatically by capitalized
    *     So far there are no whitespace characters
    * #wWhitespace := *NULL
    #wValidChar := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    
    #wInputLength := #wInputString.CurChars
    
    #wFlag_FirstLetter := True
    #wFlag_Space := False
    #wCurrentWord := *NULL
    
    * Loop thru the input letter by letter
    #wCounter := 1
    Dowhile Cond(#wCounter <= #wInputLength)
    * Get the value of the current character
    #wCurrentCharacter := #wInputString.Substring( #wCounter 1 )
    
    * If current character is a letter, proceed with proper casing, if not then just use the same character
    If Cond(#wValidChar.Contains( #wCurrentCharacter ))
    If Cond(#wFlag_FirstLetter)
    #rResult := #rResult + #COM_OWNER.umReturnSpaceIfTrue( #wFlag_Space ) + #wCurrentCharacter
    
    #wFlag_FirstLetter := False
    Else
    #rResult := #rResult + #COM_OWNER.umReturnSpaceIfTrue( #wFlag_Space ) + #wCurrentCharacter.LowerCase
    Endif
    Else
    #rResult := #rResult + #COM_OWNER.umReturnSpaceIfTrue( #wFlag_Space ) + #wCurrentCharacter
    Endif
    
    * Turn flag on if current character is blanks
    #wFlag_Space := (#wCurrentCharacter = ' ')
    
    * * Characters after a whitespace character will always be in upper case
    * If Cond(#wWhitespace.Contains( #wCurrentCharacter ))
    * #wFlag_FirstLetter := True
    * Else
    #wFlag_FirstLetter := #wFlag_Space
    * Endif
    
    * Check if current word is in the reserved word list
    If Cond((#wFlag_FirstLetter) Or (#wCounter >= #wInputLength) Or (#wCounter = 1) Or (#wCurrentWord = ''))
    * If current word is in the whitespace list found in the Code Table, capitalize that word
    Check_For In_File(LW3CODES) With_Key('PCRWRD' #wCurrentWord *LANGUAGE) Io_Error(*NEXT) Val_Error(*NEXT)
    If_Status Is(*EQUALKEY)
    If Cond(#wCounter >= #wInputLength)
    * adjust length if we are in the last character of the input
    #rResult := #rResult.ReplaceSubstring( (#wCurrentWordStart) (#wCurrentWordLen + 1) (#wCurrentWord.UpperCase) )
    Else
    #rResult := #rResult.ReplaceSubstring( #wCurrentWordStart #wCurrentWordLen (#wCurrentWord.UpperCase) )
    Endif
    Endif
    
    * Reset values on the start, at the last run of the loop and if the First Letter flag is on
    #wCurrentWordStart := #wCounter
    #wCurrentWordLen := 1
    Else
    #wCurrentWordLen += 1
    Endif
    
    #wCounter += 1
    
    * * build the current word
    If Cond(#wCounter >= #wInputLength)
    * adjust length if we are in the last character of the input
    #wCurrentWord := #wInputString.Substring( #wCurrentWordStart (#wCurrentWordLen + 1) )
    Else
    #wCurrentWord := #wInputString.Substring( #wCurrentWordStart #wCurrentWordLen )
    Endif
    Endwhile
    Endroutine
    
    * =======================================================
    * Mthroutine ....: umReturnSpaceIfTrue
    * Description....: Used in umProperCase to return a space if the condition is true
    * =======================================================
    Mthroutine Name(umReturnSpaceIfTrue) Access(*PRIVATE)
    Define_Map For(*INPUT) Class(#PRIM_BOLN) Name(#iSpaceFlag)
    Define_Map For(*RESULT) Class(#STD_ALPHA) Name(#iText)
    
    If Cond(#iSpaceFlag)
    #iText := ' '
    Else
    #iText := ''
    Endif
    Endroutine
    
    * =======================================================
    * Mthroutine ....: umDebugLog
    * Description....: Log entry to CNTDEBUG
    * =======================================================
    Mthroutine Name(umDebugLog) Desc('Log entry to CNTDEBUG')
    Define_Map For(*INPUT) Class(#LW3OBJNME) Name(#iObjectName)
    Define_Map For(*INPUT) Class(#LW3DBGTXT) Name(#iDebugText)
    
    * Input Values
    #LW3OBJNME := #iObjectName
    #LW3DBGTXT := #iDebugText
    
    * Global Data Values
    #LW3SFID := #Global_DataModel.upStorefrontId
    #LW3WEBUSR := #Global_DataModel.upUserId
    #LW3WEBC01 := #Global_DataModel.upCustomerId
    #LW3CARTID := #Global_DataModel.upCartId
    
    * Insert new DEbug Record
    Insert Fields(*ALL) To_File(CNTDEBUG) Io_Error(*NEXT) Val_Error(*NEXT)
    
    Endroutine
    
    End_Com
    
